{"version":3,"sources":["loading_spinner.gif","serviceWorker.js","Containers/Button.js","Actions/index.js","Containers/Loading.js","Containers/NewsItem.js","Components/App.js","Reducers/index.js","Sagas/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Button","getNews","onClick","mapDispatchToProps","type","connect","Loading","loading","style","textAlign","src","img","alt","state","imgStyle","hight","width","border","borderRadius","articleStyle","margin","color","NewsItem","article","title","urlToImage","description","href","url","target","news","App","reducer","action","json","fetchNews","actionWatcher","rootSaga","fetch","then","response","put","takeLatest","all","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,6C,sGCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCdFC,EAAO,gBAAEC,EAAF,EAAEA,QAAF,OACR,4BAAQC,QAASD,GAAjB,sBAGGE,EAAqB,CACtBF,QCTkB,iBAAO,CAC1BG,KAAM,cDaKJ,EAFfA,EAASK,YAAQ,KAAKF,EAAbE,CAAiCL,G,iBERtCM,EAAU,qBAAGC,QAEb,yBAAKC,MAAO,CAAEC,UAAW,WACvB,yBAAKC,IAAKC,IAAKC,IAAI,YACnB,wCAEA,MASSN,EALfA,EAAUD,aAFc,SAAAQ,GAAK,MAAK,CAAEN,QAASM,EAAMN,WAIjD,KAFQF,CAGRC,GCdIQ,EAAW,CACfC,MAAO,OACPC,MAAO,MACPC,OAAQ,2BACRC,aAAc,MAGVC,EAAe,CACnBH,MAAO,MACPI,OAAQ,SACRC,MAAO,SAGLC,EAAW,gBAAGC,EAAH,EAAGA,QAAH,OACbA,EACE,6BAASf,MAAOW,GACd,6BACE,4BAAKI,EAAQC,OACb,yBAAKhB,MAAOM,EAAUJ,IAAKa,EAAQE,WAAYb,IAAI,KACnD,4BAAKW,EAAQG,aACb,uBAAGC,KAAMJ,EAAQK,IAAKC,OAAO,qBAA7B,eAKF,MAWSP,EALfA,EAAWjB,aAJa,SAAAQ,GAAK,MAAK,CAChCU,QAASV,EAAMiB,QAKf,KAFSzB,CAGTiB,GCxBaS,EARL,kBACR,6BACG,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,0lBCTL,IAWeC,EAXC,WAAyB,IAAxBnB,EAAuB,uDAAf,GAAIoB,EAAW,uCACtC,OAAQA,EAAO7B,MACb,IAAK,WACH,OAAO,EAAP,GAAYS,EAAZ,CAAmBN,SAAS,IAC9B,IAAK,gBACH,OAAO,EAAP,GAAYM,EAAZ,CAAmBiB,KAAMG,EAAOC,KAAK,GAAI3B,SAAS,IACpD,QACE,OAAOM,I,oCCLHsB,G,WAOAC,G,WAIeC,GAXzB,SAAUF,IAAV,uEACe,OADf,SACqBG,MACjB,uHACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASN,UAH9B,OAIE,OAHMA,EADR,gBAIQO,YAAI,CAAErC,KAAM,gBAAiB8B,KAAMA,EAAKJ,OAJhD,uCAOA,SAAUM,IAAV,iEACE,OADF,SACQM,YAAW,WAAYP,GAD/B,uCAIe,SAAUE,IAAV,iEACb,OADa,SACPM,YAAI,CAACP,MADE,uC,WCFTQ,EAAiBC,cAEjBC,EAAmBlD,OAAOmD,sCAAwCC,IAElEC,EAAQC,YACZlB,EACAc,EAAiBK,YAAgBP,KAGnCA,EAAeQ,IAAIf,GAEnBgB,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SRuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.81ed7f3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_spinner.e7d73172.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { getNews } from '../Actions/index';\n\nlet Button=({getNews})=>(\n   <button onClick={getNews}>Press to see news</button>\n)\n\nconst mapDispatchToProps = {\n     getNews: getNews,\n};\n\nButton = connect(null,mapDispatchToProps)(Button);\n\nexport default Button;","export const getNews = () => ({\n    type: 'GET_NEWS',\n});","import React from \"react\";\nimport img from \"../loading_spinner.gif\";\nimport { connect } from \"react-redux\";\n\nlet Loading = ({ loading }) =>\n  loading ? (\n    <div style={{ textAlign: \"center\" }}>\n      <img src={img} alt=\"loading\" />\n      <h1>LOADING</h1>\n    </div>\n  ) : null;\n\nconst mapStateToProps = state => ({ loading: state.loading });\n\nLoading = connect(\n  mapStateToProps,\n  null\n)(Loading);\n\nexport default Loading;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst imgStyle = {\n  hight: \"auto\",\n  width: \"80%\",\n  border: \"4px solid RebeccaPurple \",\n  borderRadius: \"5%\"\n};\n\nconst articleStyle = {\n  width: \"50%\",\n  margin: \"0 auto\",\n  color: \"olive\"\n};\n\nlet NewsItem = ({ article }) =>\n  article ? (\n    <article style={articleStyle}>\n      <div>\n        <h1>{article.title}</h1>\n        <img style={imgStyle} src={article.urlToImage} alt=\"\" />\n        <h4>{article.description}</h4>\n        <a href={article.url} target=\"javscript:void(0)\">\n          READ MORE\n        </a>\n      </div>\n    </article>\n  ) : null;\n\nconst mapStateToProps = state => ({\n  article: state.news\n});\n\nNewsItem = connect(\n  mapStateToProps,\n  null\n)(NewsItem);\n\nexport default NewsItem;\n","import Button from '../Containers/Button';\nimport Loading from '../Containers/Loading'\nimport NewsItem from '../Containers/NewsItem'\nimport React from 'react';\n\nlet App = () => (\n  <div>\n     <Button />\n     <Loading />\n     <NewsItem />\n  </div>\n);\n\nexport default App;","const reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"GET_NEWS\":\n      return { ...state, loading: true };\n    case \"NEWS_RECEIVED\":\n      return { ...state, news: action.json[0], loading: false };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { put, takeLatest, all } from \"redux-saga/effects\";\n\nfunction* fetchNews() {\n  const json = yield fetch(\n    \"https://api.currentsapi.services/v1/latest-news?language=en&apiKey=ekqS6SCXSrxC1Mf9XrgC3s7HrVVECcDcQ-Ofgfz-s8bmDK5p\"\n  ).then(response => response.json());\n  yield put({ type: \"NEWS_RECEIVED\", json: json.news });\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(\"GET_NEWS\", fetchNews);\n}\n\nexport default function* rootSaga() {\n  yield all([actionWatcher()]);\n}\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./Components/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"./Reducers/index\";\nimport rootSaga from \"./Sagas/index\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}